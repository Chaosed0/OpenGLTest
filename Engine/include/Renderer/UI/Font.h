#pragma once

#include <glm/glm.hpp>

#include <vector>
#include <memory>

#include "Renderer/TexturePacker.h"
#include "Renderer/Model.h"

struct Character {
	glm::ivec2 origin;     // Position of glyph on texture atlas
	glm::ivec2 size;       // Size of glyph
	glm::ivec2 bearing;    // Offset from baseline to left/top of glyph
	long       advance;    // Offset to advance to next glyph
};

class Font
{
public:
	Font();
	Font(const std::string& fontPath, int height);

	~Font();
	
	/*!
	 * \brief Initializes the font object by loading glyphs from a font file on disk.
	 * \param fontPath The path to the font to load.
	 * \param height The size of the font which this Font will load.
	 */
	void loadCharacters(const std::string& fontPath, int height);

	/*!
	 * \brief Returns a texture object after loadCharacters has been called.
	 */
	Texture getTexture() const;

	/*!
	 * \brief Returns the total size of the font atlas generated after loadCharacters was called.
	 */
	glm::ivec2 getTextureSize() const;

	/*!
	 * \brief Gets the characteristics of a single glyph.
	 */
	Character getCharacter(unsigned int i) const;

	/*!
	 * \brief Saves the font atlas generated by loadCharacters to a bmp file for debugging purposes.
	 * \param file The location to save the bmp file.
	 */
	void saveAtlasToFile(const std::string& file) const;
private:
	struct Impl;
	std::unique_ptr<Impl> impl;
};